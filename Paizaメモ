Paizaメモ

getsメソッド
　ユーザーがキーボードで入力した値を文字列として取得するメソッド

chompメゾット
　getsメゾットと合わせて使うことが多い。getsメゾットは改行文字（\n）を含むため、chompメゾットにて改行文字を取り除く。

readlinesメゾット
　readlinesメゾットは、すべての行を読み取り、１行ごとの配列に格納します。readlinesメゾットは、改行文字（\n）を含む。
　["10\n", "12\n", "4\n", "8\n", "46\n"]　←こんな感じでね。
　なので、　readlines.map(&:chomp) とすると配列の中身は文字列となり、改行文字が消えてOK
           →数値として受け取りたいなら、readlines.map{ |n| n.chomp.to_i}とchompとto_iを行える。
　
to_iメソッド
　数字の文字列を数値オブジェクトに変換するメソッドです。
　to_iメソッドは文字列から改行文字を無視して数値に変換する事が出来る。
　なので、input = readlines.map(&:to_i)　とすると、改行文字も消えて数値の配列となる。

timesメゾット
　Integerクラスのメソッドです。指定した整数オブジェクトの回数だけdo~end内に記述する処理が繰り返し実行されます。

powメゾット
　Integer クラスで用意されている累乗できるメゾット　数値.pow(2) とすると2乗数値に対いて2乗する

splitメソッド
　文字列を指定した区切り文字で分割し、配列で返すメソッド。
  →デフォルトで空白（スペース、タブ、改行など）を区切り文字として扱う。デフォルト以外は引数で指定する。
　→改行文字を無視することが出来る。　"1 2 3\n" という文字列を splitで分割すると、改行は無視されて "1", "2", "3" という配列ができる

mapメゾット
　Arrayクラスで用意されるメゾット　配列の各要素に対して処理を行った結果を配列で返してくれるメソッドです。
  配列.map { |変数| 実行する処理 }
　また、mapメゾットではwith_indexと付けることで各要素のインデックスを取得することが出来る。
  配列.map.with_index { |n,index| 処理内容～}　といった感じ。 

minメゾット
　Arrayクラスで用意されているメゾット。配列内の最小値を求める。
　puts 配列.min とすると配列内の最小値が出力

joinメゾット
  Arrayクラスで用意されているメソッド。
  配列の各要素を1つの文字列に結合する。join("-") joinメゾットの引数には何で結合するか　を与える。

slice!メゾット
　Arrayクラスで用意されているメソッド。
　配列から指定した要素を取り出すことができるメソッド。
　slice ! の！がついている場合は、要素を取り出すだけでなく削除する。 配列.sline!(インデックス番号指定)と書く。

reverseメゾット
　Arrayクラス　Stringクラスで用意されているメゾット。
　配列の中身、文字列の中身を入れ替える(前後に)

lengthメゾット
　Arrayクラス　Stringクラスどちらでも用意されているメゾット。
　配列の要素数、文字数をカウントします。！

charsメゾット
　Stringクラスで用意されているメゾット。
　文字列の各文字を文字列の配列で返します。
　"hello世界".chars # => ["h", "e", "l", "l", "o", "世", "界"]

to_aメゾット
　ハッシュや範囲オブジェクトを配列にすることができるメゾット

浮動小数点数のクラス　Floatクラスという。
　to_fメゾットを使うと、selfを返します。　3.14.to_f   # => 3.14
　 gets.to_iだと　3.14を3と整数(Integer)となるが、　gets.to_fだと、3.14を3.14(Float)となる
　→ちなみにto_fメゾットはStingクラス Integerクラスにて用意されているメゾット

　roundメゾットは、引数で指定した数値の小数桁数を四捨五入する。　t = 3.141592653 で　t.round(3)   # => 3.142

if文について
　if 三項演算子について　条件式 ? 「真(true)」となった場合に実行したい処理 : 「偽(false)」となった場合に実行したい処理
　if 修飾子　いわゆる後置if

％記法･･･文字列リテラルの一つ
　%wを使うと、文字列を配列にできる。　%w( 1 2 3) とすると[1,2,3]といった感じ

sprintfフォーマット･･･これはフォーマット指定子を使って値を整形するためのメソッドで、数値や文字列を特定の形式で出力するために使う。
　sprintf("%.3f", 10) #=> "10.000" 第一引数にフォーマットを指定し(今回は、小数点3桁まで)、第二引数では10と指定することで、10.000 と出力される。

　sprintf( "%3d", 1000 ) →　これは数値を3桁ごとに半角スペースを入れる書き方。
　dは、整数（decimal）の事であり、i 整数(Integer)にすると8進数として使用されるためdを使用する。

  sprintf( "%03d", N ) →これは、数値を 3 けたになるよう数値の前に 0 を埋めて出力するやりかた。
　詳細は　リファレンスマニュアルを確認(https://docs.ruby-lang.org/ja/latest/doc/print_format.html)

puts print p メゾットの違い
 putsメゾット　出力後改行する。
 printメゾット　出力後改行しない。 引数として与えられたオブジェクトを改行を含まない「形式」で出力します。←形式なので配列をprintすると、[3,1,2]と出力される。
 pメゾット　出力後改行する。　オブジェクトを見やすいように出力する　""や [] も含めて出力する。

計算
　#{A / B} A÷Bと同じ 
　#{A % B} A÷Bの余り値
代入演算子
　「+=」「-=」「*=」「/=」「%=」
　こんな感じ。　 a += 3 →　a = a+3 と同じ。＝の左側に入れる。
  

メモ
 putsメゾットは、配列を出力するとき配列内の要素を一つずつ取り出し出力する。
 変数の式展開#{}は、二重引用符" "では効きますが、一重引用符' 'の中では効きません。 

気になった問題
①
N= gets.to_i
puts "*" * N　これだとOKで
N= gets.to_i
puts N * "*"これだとNG　　String can't be coerced into Integer (TypeError)　となる
→最初のは、文字列"*"を＊ N個　となるが、　最後のは、数字Nを＊文字列個となるため、ダメ。
②
N = gets.chomp
N.chars.each_with_index do |i, index|
  print ',' if index % 3 == 0 && index != 0
  print i
end
→数値を3桁事に,で区切る。　ただしこれは、入力される数値が3の倍数である時、そうで無いときは↓
test_string = gets.chomp.reverse
string_box = []
test_string.chars.each_with_index do |i,index|
    string_box << "," if index % 3 == 0 && index != 0
    string_box << i
end
puts string_box.join.reverse　こんな感じ。
③
9 個の数値が半角スペース区切りで入力されます　3 * 3 の出力せよ。　数値の間に余白を入れる。
numbers = gets.split.map(&:to_i)
(0..8).each do |i|　　#配列のindexにて繰り返し処理
 if i % 3 == 2
  puts numbers[i]
 else 
  print numbers[i]
  print " "
 end
end
④
九九表を作る
(1..9).each do |i| #数値をかける側
    numbers = (1..9).map{|j| j * i } #数値をかけられる側
    puts numbers.join(" ")
end
数値をかける側とかけれれる側でコードを分けると簡単であった。
⑤
自然数 N と N 個の要素の数列 M が与えられます。1 ≦ i ≦ N の各 i について、i 行目には以下の数列を出力してください。
* 1 以上 M_i 以下のすべての自然数を昇順、半角スペース区切りで出力してください。
N = gets.to_i
M = gets.split.map(&:to_i)
(1..N).each do |i|
    puts (1..M[i - 1]).to_a.join(" ")
end
#ここで大事なのが配列MのIndex数値と行数の違い。
⑥
実数 N、自然数 M が入力されます。N を丸めて小数第 M 位まで出力してください。
また、N の小数部が小数第 M 位に満たない場合は 0 で埋めて出力してください。

最初はこう書いた
numbers = gets.split
N = numbers[0].to_f
M = numbers[1].to_i
puts N.round(M)　
これだと、「満たない場合は、０で埋めて」ができない。
なので、sprintfフォーマットを利用する
numbers = gets.split
N = numbers[0].to_f
M = numbers[1].to_i
puts sprintf("%.#{M}f", N)

⑦自然数 Q が与えられます。Q 回以下の問題に答えてください。
実数 N、自然数 M が入力されます。N を丸めて小数第 M 位まで出力してください。また、N の小数部が小数第 M 位に満たない場合は 0 で埋めて出力してください。
Q = gets.to_i
Q.times do
    numbers = gets.split
    N = numbers[0].to_f
    M = numbers[1].to_i
    n = N.round(M)
    puts sprintf( "%.#{M}f", n )
end　こう書いた。　そうすると正常に動くが、Warning: already initialized constant Nというエラーが出る。繰り返し処理の内部へ変数を定義しているから。
なのでこう書いた。↓
Q = gets.to_i
Q.times do
    numbers = gets.split
    n = numbers[0].to_f.round(numbers[1].to_i)　#roundメゾットで四捨五入
    puts sprintf( "%.#{numbers[1].to_i}f", n )　#sprintfフォーマットにて小数点numbers[1]とした。
end
⑧自然数 H, W, A, B が与えられます。縦に H 行、横に W 行で計 H * W 個の (A, B) という形式の文字列を出力してください。
ただし、横は | (半角スペース バーティカルライン 半角スペース) 区切りで、縦は = で区切って出力してください。
また、縦の文字列間で = を出力する際は、その上の行と文字数が等しくなるように出力します。
numbers = gets.split.map(&:to_i)
H = numbers[0]
W = numbers[1]
A = numbers[2]
B = numbers[3]

test_array = []

W.times do
 test_array << "(#{A}, #{B})"
end
H.times do |h|
 puts test_array.join(" | ")
  if h != H - 1
   puts "=" * test_array.join(" | ").length
  end
end　が正しい
自分がミスした点が二つあり一つ目が、test_arrayの配列に代入する方法。
最初はこう書いた。　
test_array = [] 
test_array　<< "(#{A}, #{B})" * W
これだと、"(#{A}, #{B})"をW回数だけ繰り返すが繰り返した分test_arrayに代入されるわけではない。
二つめが、＝を出力する方法
H.times do |h| 
　puts test_array.join(" | ") 
　if h != H 
　puts "=" *　test_array.join(" | ").length
と書いた。ここでおかしいのが　h != H である。h は 0 から H-1 までの値を取るから、h が H になることはない
⑨
1 行目で、整数 N と、続けて N 個の実数 a_1, ... , a_N が半角スペース区切りで与えられます。
a_1, ... , a_N を改行区切りでそのまま出力してください
自分は最初こう書いた↓
numbers = gets.split
N = numbers[0].to_i
float_array = numbers[1..N].to_f
puts float_array　これだとエラーとなる。 Arrayクラスにto_fメゾットなんてないよと。
なので、　float_array = numbers[1..N].to_f　から　float_array = numbers[1..N].map{ |n| n.to_f }　へ変更した。
⑩
1 行目に整数 N が与えられます。
2 行目以降に、N 組の文字列 s_i と整数 a_i が N 行で与えられます。(1 ≦ i ≦ N)
N 組の s_i と a_i を改行区切りで出力してください。
N = gets.to_i
N.times do
 mix_array = gets.split
 test_array = mix_array.map.with_index{ |m,idx| idx == 1 ? m.to_i : m }
 puts test_array.join(" ")
end
ここで、最初ミスしたのが、{}の処理で後置ifを使用した。その場合は、idxが1のものだけをtest_arrayに代入された。
なので、if 三項演算子を採用した。
