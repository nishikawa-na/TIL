Paizaメモ

getsメソッド
　ユーザーがキーボードで入力した値を文字列として取得するメソッド

chompメゾット
　getsメゾットと合わせて使うことが多い。getsメゾットは改行文字（\n）を含むため、chompメゾットにて改行文字を取り除く。

readlinesメゾット
　readlinesメゾットは、すべての行を読み取り、１行ごとの配列に格納します。readlinesメゾットは、改行文字（\n）を含む。
　["10\n", "12\n", "4\n", "8\n", "46\n"]　←こんな感じでね。
　なので、　readlines.map(&:chomp) とすると配列の中身は文字列となり、改行文字が消えてOK
           →数値として受け取りたいなら、readlines.map{ |n| n.chomp.to_i}とchompとto_iを行える。
　
to_iメソッド
　数字の文字列を数値オブジェクトに変換するメソッドです。
　to_iメソッドは文字列から改行文字を無視して数値に変換する事が出来る。
　なので、input = readlines.map(&:to_i)　とすると、改行文字も消えて数値の配列となる。

timesメゾット
　Integerクラスのメソッドです。指定した整数オブジェクトの回数だけdo~end内に記述する処理が繰り返し実行されます。

powメゾット
　Integer クラスで用意されている累乗できるメゾット　数値.pow(2) とすると2乗数値に対いて2乗する

splitメソッド
　文字列を指定した区切り文字で分割し、配列で返すメソッド。
  →デフォルトで空白（スペース、タブ、改行など）を区切り文字として扱う。デフォルト以外は引数で指定する。
　→改行文字を無視することが出来る。　"1 2 3\n" という文字列を splitで分割すると、改行は無視されて "1", "2", "3" という配列ができる

mapメゾット
　Arrayクラスで用意されるメゾット　配列の各要素に対して処理を行った結果を配列で返してくれるメソッドです。
  配列.map { |変数| 実行する処理 }
　また、mapメゾットではwith_indexと付けることで各要素のインデックスを取得することが出来る。
  配列.map.with_index { |n,index| 処理内容～}　といった感じ。 

minメゾット
　Arrayクラスで用意されているメゾット。配列内の最小値を求める。
　puts 配列.min とすると配列内の最小値が出力
maxメゾットは逆ね。

pushメゾット
　Arrayクラスで用意されているメゾット。指定した値を配列の末端に追加する。
　array.push 4
　array.push [5, 6]　こんな感じで配列に追加できる。

popメゾット
　Arrayクラスで用意されているメゾット。配列の末端の値を削除する。
　array = [1, [2, 3], 4]
　p array.pop      # => 4　が削除される

joinメゾット
  Arrayクラスで用意されているメソッド。
  配列の各要素を1つの文字列に結合する。join("-") joinメゾットの引数には何で結合するか　を与える。

slice!メゾット
　Arrayクラスで用意されているメソッド。
　配列から指定した要素を取り出すことができるメソッド。
　slice ! の！がついている場合は、要素を取り出すだけでなく削除する。 配列.sline!(インデックス番号指定)と書く。

sortメゾット
　Arrayクラスで用意されているメソッド。
　配列内の順番を入れ替え、配列を返す。

indluce?メゾット
Arrayクラスで用意されているメソッド。
配列内に指定した値があるかtrue　or falseで返すメゾット
a = [ "a", "b", "c" ]
a.include?("b")       #=> true
a.include?("z")       #=> false

uniqメゾット
Arrayクラスで用意されているメソッド。
配列から重複した要素を取り除いた新しい配列を返します。

concatメゾット
　Arrayクラスで用意されているメソッド。
　自身と連結したい配列を指定します。
　array = [1, 2]
　a     = [3, 4]
　array.concat a
　p array          # => [1, 2, 3, 4]

reverseメゾット
　Arrayクラス　Stringクラスで用意されているメゾット。
　配列の中身、文字列の中身を入れ替える(前後に)

lengthメゾット
　Arrayクラス　Stringクラスどちらでも用意されているメゾット。
　配列の要素数、文字数をカウントします。！

charsメゾット
　Stringクラスで用意されているメゾット。
　文字列の各文字を文字列の配列で返します。
　"hello世界".chars # => ["h", "e", "l", "l", "o", "世", "界"]

countメゾット
　Stringクラスで用意されているメゾット。
  引数で指定された文字が文字列にいくつあるか数えます。
　　p 'abcdefg'.count('c')               # => 1

to_aメゾット
　ハッシュや範囲オブジェクトを配列にすることができるメゾット

浮動小数点数のクラス　Floatクラスという。
　to_fメゾットを使うと、selfを返します。　3.14.to_f   # => 3.14
　 gets.to_iだと　3.14を3と整数(Integer)となるが、　gets.to_fだと、3.14を3.14(Float)となる
　→ちなみにto_fメゾットはStingクラス Integerクラスにて用意されているメゾット

　roundメゾットは、引数で指定した数値の小数桁数を四捨五入する。　t = 3.141592653 で　t.round(3)   # => 3.142

keysメゾット
　Hashクラスにあるメゾット。
　Hashにあるキーを配列で取得することができる。
　h1 = { "a" => 100, 2 => ["some"], :c => "c" }
　p h1.keys           #=> ["a", 2, :c]

 key?メゾット
  Hashクラスにあるメゾット。
  ハッシュが特定のキーとして持つ時true 無いときfalseと返します。
　p({1 => "one"}.key?(1)) # => true
　p({1 => "one"}.key?(2)) # => false

valuesメゾット
　Hashクラスにあるメゾット。
　ハッシュの全値の配列を返します。

if文について
　if 三項演算子について　条件式 ? 「真(true)」となった場合に実行したい処理 : 「偽(false)」となった場合に実行したい処理
　if 修飾子　いわゆる後置if

％記法･･･文字列リテラルの一つ
　%wを使うと、文字列を配列にできる。　%w( 1 2 3) とすると[1,2,3]といった感じ

sprintfフォーマット･･･これはフォーマット指定子を使って値を整形するためのメソッドで、数値や文字列を特定の形式で出力するために使う。
　sprintf("%.3f", 10) #=> "10.000" 第一引数にフォーマットを指定し(今回は、小数点3桁まで)、第二引数では10と指定することで、10.000 と出力される。

　sprintf( "%3d", 1000 ) →　これは数値を3桁ごとに半角スペースを入れる書き方。
　dは、整数（decimal）の事であり、i 整数(Integer)にすると8進数として使用されるためdを使用する。

  sprintf( "%03d", N ) →これは、数値を 3 けたになるよう数値の前に 0 を埋めて出力するやりかた。
　詳細は　リファレンスマニュアルを確認(https://docs.ruby-lang.org/ja/latest/doc/print_format.html)

puts print p メゾットの違い
 putsメゾット　出力後改行する。
 printメゾット　出力後改行しない。 引数として与えられたオブジェクトを改行を含まない「形式」で出力します。←形式なので配列をprintすると、[3,1,2]と出力される。
 pメゾット　出力後改行する。　オブジェクトを見やすいように出力する　""や [] も含めて出力する。

計算
　#{A / B} A÷Bと同じ 
　#{A % B} A÷Bの余り値
代入演算子
　「+=」「-=」「*=」「/=」「%=」
　こんな感じ。　 a += 3 →　a = a+3 と同じ。＝の左側に入れる。
自己代入演算子
　||=　
　これは、左辺が 偽 か 未定義 なら 左辺に右辺を代入する、という意味になります。

メモ
 putsメゾットは、配列を出力するとき配列内の要素を一つずつ取り出し出力する。
 変数の式展開#{}は、二重引用符" "では効きますが、一重引用符' 'の中では効きません。 
